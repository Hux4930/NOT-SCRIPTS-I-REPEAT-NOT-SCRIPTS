local WIDTH = 300
local buttonHeight = 30
local buttonSpacing = 5
local titleHeight = 30
local padding = 20
local margin = 20
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local totalHeight = titleHeight + padding + (_G.buttons * (buttonHeight + buttonSpacing))
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HuxsScriptGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui
local backdrop = Instance.new("Frame")
backdrop.Name = "Backdrop"
backdrop.Size = UDim2.new(0, WIDTH, 0, totalHeight)
backdrop.Position = UDim2.new(1, -WIDTH - margin, 0, margin)
backdrop.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
backdrop.BorderSizePixel = 0
backdrop.Parent = screenGui
local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, titleHeight)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Huxs Script"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.Parent = backdrop
local buttonsFrame = Instance.new("Frame")
buttonsFrame.Name = "ButtonsFrame"
buttonsFrame.Size = UDim2.new(1, -20, 0, (_G.buttons * (buttonHeight + buttonSpacing)))
buttonsFrame.Position = UDim2.new(0, 10, 0, titleHeight + 5)
buttonsFrame.BackgroundTransparency = 1
buttonsFrame.Parent = backdrop
for i = 1, _G.buttons do
    local data = _G.buttonswhattheydo[i]
    local btn = Instance.new("TextButton")
    btn.Name = "Button" .. i
    btn.Size = UDim2.new(1, 0, 0, buttonHeight)
    btn.Position = UDim2.new(0, 0, 0, (i-1)*(buttonHeight + buttonSpacing))
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 18
    btn.Text = (data and data.name) or ("Button " .. i)
    btn.Parent = buttonsFrame
    btn.MouseButton1Click:Connect(function()
        if data and data.func then
            data.func()
        else
            warn("No function assigned for button " .. i)
        end
    end)
end
local dragging = false
local dragOffset = Vector2.new(0,0)
local viewportSize = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1920, 1080)
local function clampPosition(pos)
    local x = math.clamp(pos.X, 0, viewportSize.X - backdrop.AbsoluteSize.X)
    local y = math.clamp(pos.Y, 0, viewportSize.Y - backdrop.AbsoluteSize.Y)
    return Vector2.new(x, y)
end
local function beginDrag()
    local mouseLoc = UIS:GetMouseLocation()
    dragOffset = mouseLoc - backdrop.AbsolutePosition
    dragging = true
end
local function endDrag()
    dragging = false
end
backdrop.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        beginDrag()
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                endDrag()
            end
        end)
    end
end)
title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        beginDrag()
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                endDrag()
            end
        end)
    end
end)
UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        endDrag()
    end
end)
if workspace.CurrentCamera then
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        viewportSize = workspace.CurrentCamera.ViewportSize
    end)
end
local conn
conn = RunService.RenderStepped:Connect(function()
    if dragging then
        local mouseLoc = UIS:GetMouseLocation()
        local newTopLeft = mouseLoc - dragOffset
        local clamped = clampPosition(newTopLeft)
        backdrop.Position = UDim2.new(0, clamped.X, 0, clamped.Y)
    end
end)
screenGui.AncestryChanged:Connect(function(child, parent)
    if not parent then
        if conn and conn.Connected then
            conn:Disconnect()
        end
    end
end)
